name: 同步 Xposed-Modules-Repo 的 Releases

on:
  schedule:
    - cron: '59 * * * *' # 每40分钟检查一次
  workflow_dispatch: # 支持手动触发

jobs:
  sync-releases:
    runs-on: ubuntu-latest

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 配置 Git
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: 检查新 Release
      id: check-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 获取目标仓库最新 Release 信息
        LATEST_RELEASE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          https://api.github.com/repos/Xposed-Modules-Repo/wx.repair.tool/releases/latest)
        
        # 输出调试信息
        echo "$LATEST_RELEASE"  # 打印完整的 JSON 返回数据
        
        # 检查 API 请求是否成功
        if [ -z "$LATEST_RELEASE" ] || echo "$LATEST_RELEASE" | grep -q "Not Found"; then
          echo "错误: 无法获取目标仓库的 Release 信息，可能仓库不存在或无权限"
          exit 1
        fi
        
        # 提取版本号
        TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        
        # 输出版本号
        echo "最新 Release 版本: $TAG_NAME"

        # 检查是否已有此版本
        EXISTING_RELEASE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          https://api.github.com/repos/klcb2010/wx.repair.tool/releases | jq -r ".[] | select(.tag_name==\"$TAG_NAME\")")
        
        if [ -z "$EXISTING_RELEASE" ]; then
          echo "发现新 Release: $TAG_NAME"
          echo "new_release=true" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # 检查并获取 Release 资产
          RELEASE_ASSETS=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | .browser_download_url')

          # 过滤出 APK 文件的资产链接
          APK_ASSETS=$(echo "$RELEASE_ASSETS" | grep -i ".apk")
          if [ -z "$APK_ASSETS" ]; then
            echo "警告: 目标 Release 没有 APK 文件"
            echo "apk_assets=none" >> $GITHUB_OUTPUT
          else
            echo "apk_assets=$APK_ASSETS" >> $GITHUB_OUTPUT
          fi
        else
          echo "没有发现新 Release。"
          echo "new_release=false" >> $GITHUB_OUTPUT
        fi

    - name: 下载并同步 APK 资产
      if: steps.check-release.outputs.new_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${{ steps.check-release.outputs.tag_name }}
        APK_ASSETS=${{ steps.check-release.outputs.apk_assets }}
        
        # 检查是否有 APK 文件
        if [ "$APK_ASSETS" = "none" ]; then
          echo "没有 APK 文件可下载，跳过同步"
          exit 0
        fi
        
        # 下载所有 APK 资产
        mkdir -p release-assets
        for ASSET_URL in $APK_ASSETS; do
          ASSET_NAME=$(basename "$ASSET_URL")
          echo "正在下载 APK 资产: $ASSET_NAME"
          curl -L -o "release-assets/$ASSET_NAME" "$ASSET_URL"
          if [ $? -ne 0 ]; then
            echo "错误: 下载 APK 资产 $ASSET_NAME 失败"
            exit 1
          fi
        done
        
        # 验证资产文件存在
        if [ -z "$(ls release-assets)" ]; then
          echo "错误: APK 资产文件下载失败或目录为空"
          exit 1
        fi
        
        # 创建新的 Release 并上传 APK 资产
        gh release create "$TAG_NAME" \
          --title "$TAG_NAME" \
          release-assets/* \
          --repo klcb2010/wx.repair.tool
        if [ $? -ne 0 ]; then
          echo "错误: 创建 Release 失败"
          exit 1
        fi

    - name: 失败时通知
      if: failure()
      run: |
        echo "同步失败，请检查日志。"
        echo "资产文件列表:"
        ls -l release-assets || echo "无法显示资产文件列表"
